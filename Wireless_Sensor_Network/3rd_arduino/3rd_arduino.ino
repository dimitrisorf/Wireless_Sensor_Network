// SERVER_2

#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/78a227f2-1980-45bc-bbd5-a621c73bf3ac 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int brightness;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <WiFiNINA.h>
#include <WiFi.h>

const char* ssid = "Dimitris";
const char* password = "dimitris0510";
const int serverPort = 99;
int temp = 0;
int counter = 0;
int threshold = 40;

WiFiServer server(serverPort);
int status = WL_IDLE_STATUS;

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  // Connection to client_2:
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }

  // attempt to connect to WiFi network
  while (status != WL_CONNECTED) {
    Serial.print("Attempting to connect to WPA SSID: ");
    Serial.println(ssid);
    status = WiFi.begin(ssid, password);
    delay(10000);
  }

  Serial.println("Connected to wifi");
  Serial.println(WiFi.localIP());

  // start the server
  server.begin();
  Serial.println("I (Server 2) started");
}

void loop() {
  ArduinoCloud.update();
  func();  
}

/*
  Since Brightness is READ_WRITE variable, onBrightnessChange() is
  executed every time a new value is received from IoT Cloud.
*/

void onBrightnessChange()  {
  // Add your code here to act upon Brightness change

}

/*
  Since Messagee is READ_WRITE variable, onMessageeChange() is
  executed every time a new value is received from IoT Cloud.
*/

void onMessageeChange()  {
  // Add your code here to act upon Messagee change
}

void func(){
  WiFiClient client2 = server.available();
  int br;

  // Check WiFi connection status
  int status = WiFi.status();
  if (status != WL_CONNECTED) {
    Serial.println("!!!!!!!!!!!!!!!!!!!!!!!!!");
    Serial.println("Lost internet connection!");
    Serial.println("!!!!!!!!!!!!!!!!!!!!!!!!!");
    while (1); // halt the program
  }

  if (client2) {
    Serial.println("Client 2 connected");
    int numValuesReceived = 0;

    while (client2.connected()) {

      if (client2.available()) {
        String message = client2.readStringUntil('\n');
        br = message.toInt();
        temp = temp + br;
        Serial.print("Message from Client 2: ");
        Serial.println(br);
        numValuesReceived++;
        counter++;
        // Serial.print("Counter: ");
        // Serial.println(counter);

        // send a response back to the client_2
        // client2.print2("OK\r\n");
        client2.println("Received message from Server 2: " + message);
      }

      if (numValuesReceived >= 10) { // Change this to the number of values you expect to receive
        break;
      }
    }

    client2.stop();
    Serial.println("Client 2 disconnected");
    Serial.println();

    if (counter >= 10){
      brightness = temp / counter; // brightness is the mean of the (counter) packets
      delay(5);
      temp = 0;
      counter = 0;
      Serial.println("-------------------------------------------------------------------------------------------------------------------------------------------------------------");
      Serial.print("Mean brightness: ");
      Serial.println(brightness);
      Serial.println("-------------------------------------------------------------------------------------------------------------------------------------------------------------");
      Serial.println();
      if (brightness >= threshold){
        messagee = "Lights are perfect!";
      }
      else{
        messagee = "Too dark";
      }

    }

  }

}

